# This file is automatically generated by running
#
#     cmake/scripts/generate-cmakefiles
#
# Require CMake 3.5
cmake_minimum_required(VERSION 3.5)

set(PROJECT_NAME_HEAT heat_DN)
project(${PROJECT_NAME_HEAT})

set(PROJECT_NAME_EULER euler_DN)
project(${PROJECT_NAME_EULER})

# Set CMake behavior
cmake_policy(SET CMP0004 NEW)

# Get DOLFIN configuration data (DOLFINConfig.cmake must be in
# DOLFIN_CMAKE_CONFIG_PATH)
find_package(DOLFIN REQUIRED)

include_directories(../../include)
include_directories(../)
######################################
# change to your python path and version
######################################
include_directories(/usr/include/python3.6m/)

set(SOURCES_BASE ../waveform.cpp ../waveform_locking.cpp ../WFR_GS.cpp ../WFR_JAC.cpp ../WFR_NEW.cpp ../utils.cpp ../WFR.cpp)
set(SOURCES_LOCAL input_reader_heat.cpp)
set(SOURCES_FENICS_CPP fenics_cpp/problem_heat.cpp fenics_cpp/problem_heat_D.cpp fenics_cpp/problem_heat_N.cpp)
set(SOURCES_FENICS_PYTHON fenics_python/problem_heat_python.cpp)
set(SOURCES_DUNE_PYTHON dune_python/problem_heat_dune.cpp)
 
include(${DOLFIN_USE_FILE})

# Default build type (can be overridden by user)
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING
      "Choose the type of build, options are: Debug MinSizeRel Release RelWithDebInfo." FORCE)
endif()

# Do not throw error for 'multi-line comments' (these are typical in
# rst which includes LaTeX)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-Wall" HAVE_NO_MULTLINE)
if (HAVE_NO_MULTLINE)
  set(CMAKE_CXX_FLAGS "-Wall ${CMAKE_CXX_FLAGS}")
endif()

# Executable
add_executable(${PROJECT_NAME_HEAT} main_heat.cpp ${SOURCES_BASE} ${SOURCES_LOCAL} ${SOURCES_FENICS_CPP} ${SOURCES_FENICS_PYTHON} ${SOURCES_DUNE_PYTHON})
add_executable(${PROJECT_NAME_EULER} main_euler.cpp ${SOURCES_BASE} ${SOURCES_DUNE_PYTHON})
######################################
# make sure this uses the correct python version, see above
######################################
target_link_libraries(${PROJECT_NAME_HEAT} dolfin python3.6m)
target_link_libraries(${PROJECT_NAME_EULER} dolfin python3.6m) # should not need dolfin, but dolfin makes sure mpi is there

# Test targets
set(test_parameters -np 2 ${MPIEXEC_PARAMS} "./${PROJECT_NAME_HEAT}")
add_test(NAME ${PROJECT_NAME_HEAT}_mpi COMMAND "mpirun" ${test_parameters})
add_test(NAME ${PROJECT_NAME_HEAT}_serial COMMAND ${PROJECT_NAME_HEAT})
